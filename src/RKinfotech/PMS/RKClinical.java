/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RKinfotech.PMS;

import RKinfotech.Class.rkConnection;
import RKinfotech.Class.rkDatabase;
import RKinfotech.Class.rkValidation;
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashMap;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;

/**
 *
 * @author rk
 */
public class RKClinical extends javax.swing.JInternalFrame {

    /**
     * Creates new form RKClinical
     */
    public RKClinical() {
        initComponents();
        con = rkConnection.rkConnection();
        db.rkAutoCompleted(new JComboBox[]{rkCodeMT, rkCodeSec, rkCodeCon1, rkCodeNOR, rkCodeDSP});

        /* --------------------------------------------------------------------------- */
        mtHashMap = new HashMap<>();
        mtHashMap = db.DML("SELECT `ID`,`rkCode` FROM `rkmts`");
        mtHashMap.entrySet().forEach((e) -> {
            rkCodeMT.addItem((String) e.getKey());
        });
        year[0] = Integer.parseInt((String) rkYear.getSelectedItem());
        month[0] = Integer.parseInt((String) rkMonth.getSelectedItem());
        /* --------------------------------------------------------------------------- */

 /* --------------------------------------------------------------------------- */
        conHashMap = new HashMap<>();
        conHashMap = db.DML("SELECT `ID`, `rkCode` FROM `rkcons`");
        conHashMap.entrySet().forEach((e) -> {
            rkCodeCon1.addItem((String) e.getKey());
        });
        year[1] = Integer.parseInt((String) rkYearCon.getSelectedItem());
        month[1] = Integer.parseInt((String) rkMonthCon.getSelectedItem());
        /* --------------------------------------------------------------------------- */

 /* --------------------------------------------------------------------------- */
        secHashMap = new HashMap<>();
        secHashMap = db.DML("SELECT `ID`, `rkCode` FROM `rksecs`");
        secHashMap.entrySet().forEach((e) -> {
            rkCodeSec.addItem((String) e.getKey());
        });
        year[2] = Integer.parseInt((String) rkYearSec.getSelectedItem());
        month[2] = Integer.parseInt((String) rkMonthSec.getSelectedItem());
        /* --------------------------------------------------------------------------- */

 /* --------------------------------------------------------------------------- */
        dspHashMap = new HashMap<>();
        dspHashMap = db.DML("SELECT `ID`, `rkCode` FROM `rkdsps`");
        dspHashMap.entrySet().forEach((e) -> {
            rkCodeDSP.addItem((String) e.getKey());
        });
        year[3] = Integer.parseInt((String) rkYearDps.getSelectedItem());
        month[3] = Integer.parseInt((String) rkMonthDps.getSelectedItem());
        /* --------------------------------------------------------------------------- */

 /* --------------------------------------------------------------------------- */
        recHashMap = new HashMap<>();
        recHashMap = db.DML("SELECT `ID`, `rkCode` FROM `rkrecs`");
        recHashMap.entrySet().forEach((e) -> {
            rkCodeNOR.addItem((String) e.getKey());
        });
        year[4] = Integer.parseInt((String) rkYearNor.getSelectedItem());
        month[4] = Integer.parseInt((String) rkMonthNor.getSelectedItem());
        /* --------------------------------------------------------------------------- */
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this mtHashMap. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        RKClinical = new javax.swing.JTabbedPane();
        rkMTStaff = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        rkCodeMT = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        rkNameMT = new javax.swing.JTextField();
        rkMedicinesMT = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        rkPlabMT = new javax.swing.JTextField();
        rkXrayMT = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        rkTotalMT = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        rkSaveMT = new javax.swing.JButton();
        rkYear = new javax.swing.JComboBox<>();
        jLabel34 = new javax.swing.JLabel();
        rkMonth = new javax.swing.JComboBox<>();
        jLabel35 = new javax.swing.JLabel();
        rkAmbulanceMT = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        rkConStaff = new javax.swing.JPanel();
        jLabel29 = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        rkMedicinesContr = new javax.swing.JTextField();
        rkNameContr = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        jLabel32 = new javax.swing.JLabel();
        rkTotalContr = new javax.swing.JTextField();
        rkXrayContr = new javax.swing.JTextField();
        rkPlabContr = new javax.swing.JTextField();
        jLabel33 = new javax.swing.JLabel();
        rkSaveConStaff = new javax.swing.JButton();
        rkCodeCon1 = new javax.swing.JComboBox<>();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        rkYearCon = new javax.swing.JComboBox<>();
        jLabel38 = new javax.swing.JLabel();
        rkMonthCon = new javax.swing.JComboBox<>();
        rkAmbulanceContr1 = new javax.swing.JTextField();
        jLabel45 = new javax.swing.JLabel();
        rkSecStaff = new javax.swing.JPanel();
        rkNameSecu = new javax.swing.JTextField();
        rkMedicinesSecu = new javax.swing.JTextField();
        rkPlabSecu = new javax.swing.JTextField();
        rkXraySecu = new javax.swing.JTextField();
        rkTotalSecu = new javax.swing.JTextField();
        rkSaveSecStaff = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        rkYearSec = new javax.swing.JComboBox<>();
        jLabel39 = new javax.swing.JLabel();
        rkMonthSec = new javax.swing.JComboBox<>();
        jLabel40 = new javax.swing.JLabel();
        rkCodeSec = new javax.swing.JComboBox<>();
        jLabel46 = new javax.swing.JLabel();
        rkAmbulanceSecu = new javax.swing.JTextField();
        rkDPSStaff = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        rkMedicinesDSP = new javax.swing.JTextField();
        rkNameDSP = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        rkTotalDSP = new javax.swing.JTextField();
        rkXrayDSP = new javax.swing.JTextField();
        rkPlabDSP = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        rkSaveDSP = new javax.swing.JButton();
        jLabel41 = new javax.swing.JLabel();
        rkYearDps = new javax.swing.JComboBox<>();
        jLabel42 = new javax.swing.JLabel();
        rkMonthDps = new javax.swing.JComboBox<>();
        rkCodeDSP = new javax.swing.JComboBox<>();
        jLabel47 = new javax.swing.JLabel();
        rkAmbulanceDSP = new javax.swing.JTextField();
        rkNonRec = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        rkMedicinesNonRec = new javax.swing.JTextField();
        rkNameNonRec = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        jLabel26 = new javax.swing.JLabel();
        rkTotalNonRec = new javax.swing.JTextField();
        rkXrayNonRec = new javax.swing.JTextField();
        rkPlabNonRec = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        rkSaveRec = new javax.swing.JButton();
        jLabel43 = new javax.swing.JLabel();
        rkYearNor = new javax.swing.JComboBox<>();
        jLabel44 = new javax.swing.JLabel();
        rkMonthNor = new javax.swing.JComboBox<>();
        rkCodeNOR = new javax.swing.JComboBox<>();
        jLabel48 = new javax.swing.JLabel();
        rkAmbulanceNonRec = new javax.swing.JTextField();

        setClosable(true);
        setIconifiable(true);
        setTitle("CLINICAL TREATMENT");

        jLabel4.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel4.setText("Code");

        rkCodeMT.setEditable(true);
        rkCodeMT.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecte Code" }));
        rkCodeMT.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rkCodeMTItemStateChanged(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel5.setText("Name");

        rkMedicinesMT.setText("00");
        rkMedicinesMT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalMTKeyReleased(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel6.setText("Medicines");

        jLabel7.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel7.setText("P-Lab");

        rkPlabMT.setText("00");
        rkPlabMT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalMTKeyReleased(evt);
            }
        });

        rkXrayMT.setText("00");
        rkXrayMT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalMTKeyReleased(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel8.setText("X-Ray");

        rkTotalMT.setText("00");

        jLabel9.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel9.setText("Total");

        rkSaveMT.setText("Save");
        rkSaveMT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rkSaveMTActionPerformed(evt);
            }
        });

        rkYear.setEditable(true);
        rkYear.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060", "2061", "2062", "2063", "2064", "2065", "2066", "2067", "2068", "2069", "2070", "2071", "2072", "2073", "2074", "2075", "2076", "2077", "2078", "2079", "2080", "2081", "2082", "2083", "2084", "2085", "2086", "2087", "2088", "2089", "2090", "2091", "2092", "2093", "2094", "2095", "2096", "2097", "2098", "2099" }));
        rkYear.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rkMonthYearItemStateChanged(evt);
            }
        });

        jLabel34.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel34.setText("Year");

        rkMonth.setEditable(true);
        rkMonth.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        rkMonth.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rkMonthYearItemStateChanged(evt);
            }
        });

        jLabel35.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel35.setText("Month");

        rkAmbulanceMT.setText("00");
        rkAmbulanceMT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalMTKeyReleased(evt);
            }
        });

        jLabel28.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel28.setText("Ambulance");

        javax.swing.GroupLayout rkMTStaffLayout = new javax.swing.GroupLayout(rkMTStaff);
        rkMTStaff.setLayout(rkMTStaffLayout);
        rkMTStaffLayout.setHorizontalGroup(
            rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rkMTStaffLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rkMTStaffLayout.createSequentialGroup()
                        .addGroup(rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addGap(88, 88, 88)
                        .addGroup(rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rkNameMT)
                            .addComponent(rkCodeMT, 0, 176, Short.MAX_VALUE)))
                    .addGroup(rkMTStaffLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(53, 53, 53)
                        .addComponent(rkMedicinesMT))
                    .addGroup(rkMTStaffLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(88, 88, 88)
                        .addComponent(rkPlabMT))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rkMTStaffLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(rkSaveMT, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rkMTStaffLayout.createSequentialGroup()
                        .addComponent(jLabel34)
                        .addGap(22, 22, 22)
                        .addComponent(rkYear, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel35)
                        .addGap(18, 18, 18)
                        .addComponent(rkMonth, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(rkMTStaffLayout.createSequentialGroup()
                        .addGroup(rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel28))
                        .addGap(48, 48, 48)
                        .addGroup(rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rkAmbulanceMT)
                            .addComponent(rkTotalMT)
                            .addComponent(rkXrayMT))))
                .addContainerGap())
        );
        rkMTStaffLayout.setVerticalGroup(
            rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rkMTStaffLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rkYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel35)
                    .addComponent(rkMonth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(rkCodeMT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rkNameMT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rkMedicinesMT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(rkPlabMT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(rkXrayMT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(rkAmbulanceMT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkMTStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(rkTotalMT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rkSaveMT)
                .addContainerGap())
        );

        RKClinical.addTab("M & T Staff", rkMTStaff);

        jLabel29.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel29.setText("Emp Name");

        jLabel30.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel30.setText("Medicines");

        rkMedicinesContr.setText("00");
        rkMedicinesContr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalContrKeyReleased(evt);
            }
        });

        jLabel31.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel31.setText("P-Lab");

        jLabel32.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel32.setText("X-Ray");

        rkTotalContr.setText("00");

        rkXrayContr.setText("00");
        rkXrayContr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalContrKeyReleased(evt);
            }
        });

        rkPlabContr.setText("00");
        rkPlabContr.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalContrKeyReleased(evt);
            }
        });

        jLabel33.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel33.setText("Total");

        rkSaveConStaff.setText("Save");
        rkSaveConStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rkSaveConStaffActionPerformed(evt);
            }
        });

        rkCodeCon1.setEditable(true);
        rkCodeCon1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecte Code" }));
        rkCodeCon1.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rkCodeCon1ItemStateChanged(evt);
            }
        });

        jLabel36.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel36.setText("Code");

        jLabel37.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel37.setText("Year");

        rkYearCon.setEditable(true);
        rkYearCon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060", "2061", "2062", "2063", "2064", "2065", "2066", "2067", "2068", "2069", "2070", "2071", "2072", "2073", "2074", "2075", "2076", "2077", "2078", "2079", "2080", "2081", "2082", "2083", "2084", "2085", "2086", "2087", "2088", "2089", "2090", "2091", "2092", "2093", "2094", "2095", "2096", "2097", "2098", "2099" }));
        rkYearCon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rkMonthYearConItemStateChanged(evt);
            }
        });

        jLabel38.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel38.setText("Month");

        rkMonthCon.setEditable(true);
        rkMonthCon.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        rkMonthCon.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rkMonthYearConItemStateChanged(evt);
            }
        });

        rkAmbulanceContr1.setText("00");
        rkAmbulanceContr1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalContrKeyReleased(evt);
            }
        });

        jLabel45.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel45.setText("Ambulance");

        javax.swing.GroupLayout rkConStaffLayout = new javax.swing.GroupLayout(rkConStaff);
        rkConStaff.setLayout(rkConStaffLayout);
        rkConStaffLayout.setHorizontalGroup(
            rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rkConStaffLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rkConStaffLayout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addGap(53, 53, 53)
                        .addComponent(rkMedicinesContr))
                    .addGroup(rkConStaffLayout.createSequentialGroup()
                        .addComponent(jLabel31)
                        .addGap(88, 88, 88)
                        .addComponent(rkPlabContr))
                    .addGroup(rkConStaffLayout.createSequentialGroup()
                        .addGroup(rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel29)
                            .addComponent(jLabel36))
                        .addGap(48, 48, 48)
                        .addGroup(rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rkCodeCon1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(rkNameContr)))
                    .addGroup(rkConStaffLayout.createSequentialGroup()
                        .addComponent(jLabel32)
                        .addGap(88, 88, 88)
                        .addComponent(rkXrayContr))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rkConStaffLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(rkSaveConStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rkConStaffLayout.createSequentialGroup()
                        .addComponent(jLabel37)
                        .addGap(22, 22, 22)
                        .addComponent(rkYearCon, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rkMonthCon, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 4, Short.MAX_VALUE))
                    .addGroup(rkConStaffLayout.createSequentialGroup()
                        .addGroup(rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel45)
                            .addComponent(jLabel33))
                        .addGap(48, 48, 48)
                        .addGroup(rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rkAmbulanceContr1)
                            .addComponent(rkTotalContr))))
                .addContainerGap())
        );
        rkConStaffLayout.setVerticalGroup(
            rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rkConStaffLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rkYearCon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel38)
                    .addComponent(rkMonthCon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel36)
                    .addComponent(rkCodeCon1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rkNameContr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rkMedicinesContr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(rkPlabContr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel32)
                    .addComponent(rkXrayContr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel45)
                    .addComponent(rkAmbulanceContr1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkConStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(rkTotalContr, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rkSaveConStaff)
                .addContainerGap())
        );

        RKClinical.addTab("Contractual Staff", rkConStaff);

        rkMedicinesSecu.setText("00");
        rkMedicinesSecu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalSecuKeyReleased(evt);
            }
        });

        rkPlabSecu.setText("00");
        rkPlabSecu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalSecuKeyReleased(evt);
            }
        });

        rkXraySecu.setText("00");
        rkXraySecu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalSecuKeyReleased(evt);
            }
        });

        rkTotalSecu.setText("00");

        rkSaveSecStaff.setText("Save");
        rkSaveSecStaff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rkSaveSecStaffActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel10.setText("Total");

        jLabel11.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel11.setText("X-Ray");

        jLabel12.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel12.setText("P-Lab");

        jLabel13.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel13.setText("Medicines");

        jLabel14.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel14.setText("Name");

        jLabel15.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel15.setText("Secu.Code");

        rkYearSec.setEditable(true);
        rkYearSec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060", "2061", "2062", "2063", "2064", "2065", "2066", "2067", "2068", "2069", "2070", "2071", "2072", "2073", "2074", "2075", "2076", "2077", "2078", "2079", "2080", "2081", "2082", "2083", "2084", "2085", "2086", "2087", "2088", "2089", "2090", "2091", "2092", "2093", "2094", "2095", "2096", "2097", "2098", "2099" }));
        rkYearSec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkYearMonthSecKeyReleased(evt);
            }
        });

        jLabel39.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel39.setText("Year");

        rkMonthSec.setEditable(true);
        rkMonthSec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        rkMonthSec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkYearMonthSecKeyReleased(evt);
            }
        });

        jLabel40.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel40.setText("Month");

        rkCodeSec.setEditable(true);
        rkCodeSec.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecte Code" }));
        rkCodeSec.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rkCodeSecItemStateChanged(evt);
            }
        });

        jLabel46.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel46.setText("Ambulance");

        rkAmbulanceSecu.setText("00");
        rkAmbulanceSecu.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalSecuKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout rkSecStaffLayout = new javax.swing.GroupLayout(rkSecStaff);
        rkSecStaff.setLayout(rkSecStaffLayout);
        rkSecStaffLayout.setHorizontalGroup(
            rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rkSecStaffLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rkSecStaffLayout.createSequentialGroup()
                        .addGroup(rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jLabel14))
                        .addGap(49, 49, 49)
                        .addGroup(rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rkNameSecu)
                            .addComponent(rkCodeSec, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(rkSecStaffLayout.createSequentialGroup()
                        .addComponent(jLabel13)
                        .addGap(53, 53, 53)
                        .addComponent(rkMedicinesSecu))
                    .addGroup(rkSecStaffLayout.createSequentialGroup()
                        .addComponent(jLabel12)
                        .addGap(88, 88, 88)
                        .addComponent(rkPlabSecu))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rkSecStaffLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(rkSaveSecStaff, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rkSecStaffLayout.createSequentialGroup()
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rkYearSec, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rkMonthSec, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rkSecStaffLayout.createSequentialGroup()
                        .addGroup(rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10)
                            .addComponent(jLabel46))
                        .addGap(48, 48, 48)
                        .addGroup(rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rkAmbulanceSecu)
                            .addComponent(rkTotalSecu, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(rkXraySecu))))
                .addContainerGap())
        );
        rkSecStaffLayout.setVerticalGroup(
            rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rkSecStaffLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rkYearSec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel40)
                    .addComponent(rkMonthSec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel15)
                    .addComponent(rkCodeSec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rkNameSecu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rkMedicinesSecu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(rkPlabSecu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(rkXraySecu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel46)
                    .addComponent(rkAmbulanceSecu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkSecStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(rkTotalSecu, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rkSaveSecStaff)
                .addContainerGap())
        );

        RKClinical.addTab("Security Staff", rkSecStaff);

        jLabel16.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel16.setText("Code");

        jLabel17.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel17.setText("Name");

        jLabel18.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel18.setText("Medicines");

        rkMedicinesDSP.setText("00");
        rkMedicinesDSP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalDSPKeyReleased(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel19.setText("P-Lab");

        jLabel20.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel20.setText("X-Ray");

        rkTotalDSP.setText("00");

        rkXrayDSP.setText("00");
        rkXrayDSP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalDSPKeyReleased(evt);
            }
        });

        rkPlabDSP.setText("00");
        rkPlabDSP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalDSPKeyReleased(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel21.setText("Total");

        rkSaveDSP.setText("Save");
        rkSaveDSP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rkSaveDSPActionPerformed(evt);
            }
        });

        jLabel41.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel41.setText("Year");

        rkYearDps.setEditable(true);
        rkYearDps.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060", "2061", "2062", "2063", "2064", "2065", "2066", "2067", "2068", "2069", "2070", "2071", "2072", "2073", "2074", "2075", "2076", "2077", "2078", "2079", "2080", "2081", "2082", "2083", "2084", "2085", "2086", "2087", "2088", "2089", "2090", "2091", "2092", "2093", "2094", "2095", "2096", "2097", "2098", "2099" }));
        rkYearDps.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rkYearMonthDpsItemStateChanged(evt);
            }
        });

        jLabel42.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel42.setText("Month");

        rkMonthDps.setEditable(true);
        rkMonthDps.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        rkMonthDps.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rkYearMonthDpsItemStateChanged(evt);
            }
        });

        rkCodeDSP.setEditable(true);
        rkCodeDSP.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecte Code" }));
        rkCodeDSP.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rkCodeDSPItemStateChanged(evt);
            }
        });

        jLabel47.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel47.setText("Ambulance");

        rkAmbulanceDSP.setText("00");
        rkAmbulanceDSP.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalDSPKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout rkDPSStaffLayout = new javax.swing.GroupLayout(rkDPSStaff);
        rkDPSStaff.setLayout(rkDPSStaffLayout);
        rkDPSStaffLayout.setHorizontalGroup(
            rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rkDPSStaffLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rkDPSStaffLayout.createSequentialGroup()
                        .addGroup(rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel16)
                            .addComponent(jLabel17))
                        .addGap(88, 88, 88)
                        .addGroup(rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rkNameDSP)
                            .addComponent(rkCodeDSP, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(rkDPSStaffLayout.createSequentialGroup()
                        .addComponent(jLabel18)
                        .addGap(53, 53, 53)
                        .addComponent(rkMedicinesDSP))
                    .addGroup(rkDPSStaffLayout.createSequentialGroup()
                        .addComponent(jLabel19)
                        .addGap(88, 88, 88)
                        .addComponent(rkPlabDSP))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rkDPSStaffLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(rkSaveDSP, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rkDPSStaffLayout.createSequentialGroup()
                        .addComponent(jLabel41)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rkYearDps, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel42)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rkMonthDps, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rkDPSStaffLayout.createSequentialGroup()
                        .addGroup(rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21)
                            .addComponent(jLabel47))
                        .addGap(48, 48, 48)
                        .addGroup(rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rkAmbulanceDSP)
                            .addComponent(rkTotalDSP, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(rkXrayDSP))))
                .addContainerGap())
        );
        rkDPSStaffLayout.setVerticalGroup(
            rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rkDPSStaffLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel41, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rkYearDps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel42)
                    .addComponent(rkMonthDps, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(rkCodeDSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rkNameDSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rkMedicinesDSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(rkPlabDSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(rkXrayDSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel47)
                    .addComponent(rkAmbulanceDSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkDPSStaffLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(rkTotalDSP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rkSaveDSP)
                .addContainerGap())
        );

        RKClinical.addTab("DPS Staff", rkDPSStaff);

        jLabel22.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel22.setText("Code");

        jLabel23.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel23.setText("Name");

        jLabel24.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel24.setText("Medicines");

        rkMedicinesNonRec.setText("00");
        rkMedicinesNonRec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalNorKeyReleased(evt);
            }
        });

        jLabel25.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel25.setText("P-Lab");

        jLabel26.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel26.setText("X-Ray");

        rkTotalNonRec.setText("00");

        rkXrayNonRec.setText("00");
        rkXrayNonRec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalNorKeyReleased(evt);
            }
        });

        rkPlabNonRec.setText("00");
        rkPlabNonRec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalNorKeyReleased(evt);
            }
        });

        jLabel27.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel27.setText("Total");

        rkSaveRec.setText("Save");
        rkSaveRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rkSaveRecActionPerformed(evt);
            }
        });

        jLabel43.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel43.setText("Year");

        rkYearNor.setEditable(true);
        rkYearNor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2017", "2018", "2019", "2020", "2021", "2022", "2023", "2024", "2025", "2026", "2027", "2028", "2029", "2030", "2031", "2032", "2033", "2034", "2035", "2036", "2037", "2038", "2039", "2040", "2041", "2042", "2043", "2044", "2045", "2046", "2047", "2048", "2049", "2050", "2051", "2052", "2053", "2054", "2055", "2056", "2057", "2058", "2059", "2060", "2061", "2062", "2063", "2064", "2065", "2066", "2067", "2068", "2069", "2070", "2071", "2072", "2073", "2074", "2075", "2076", "2077", "2078", "2079", "2080", "2081", "2082", "2083", "2084", "2085", "2086", "2087", "2088", "2089", "2090", "2091", "2092", "2093", "2094", "2095", "2096", "2097", "2098", "2099" }));
        rkYearNor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rkYearMonthNorItemStateChanged(evt);
            }
        });

        jLabel44.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel44.setText("Month");

        rkMonthNor.setEditable(true);
        rkMonthNor.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12" }));
        rkMonthNor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rkYearMonthNorItemStateChanged(evt);
            }
        });

        rkCodeNOR.setEditable(true);
        rkCodeNOR.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecte Code" }));
        rkCodeNOR.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                rkCodeNORItemStateChanged(evt);
            }
        });

        jLabel48.setFont(new java.awt.Font("DejaVu Math TeX Gyre", 1, 14)); // NOI18N
        jLabel48.setText("Ambulance");

        rkAmbulanceNonRec.setText("00");
        rkAmbulanceNonRec.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rkTotalNorKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout rkNonRecLayout = new javax.swing.GroupLayout(rkNonRec);
        rkNonRec.setLayout(rkNonRecLayout);
        rkNonRecLayout.setHorizontalGroup(
            rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(rkNonRecLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(rkNonRecLayout.createSequentialGroup()
                        .addGroup(rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel22)
                            .addComponent(jLabel23))
                        .addGap(88, 88, 88)
                        .addGroup(rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rkNameNonRec)
                            .addComponent(rkCodeNOR, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(rkNonRecLayout.createSequentialGroup()
                        .addComponent(jLabel24)
                        .addGap(53, 53, 53)
                        .addComponent(rkMedicinesNonRec))
                    .addGroup(rkNonRecLayout.createSequentialGroup()
                        .addComponent(jLabel25)
                        .addGap(88, 88, 88)
                        .addComponent(rkPlabNonRec))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rkNonRecLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(rkSaveRec, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rkNonRecLayout.createSequentialGroup()
                        .addComponent(jLabel43)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rkYearNor, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel44)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(rkMonthNor, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(rkNonRecLayout.createSequentialGroup()
                        .addGroup(rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel26)
                            .addComponent(jLabel27)
                            .addComponent(jLabel48))
                        .addGap(48, 48, 48)
                        .addGroup(rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rkAmbulanceNonRec)
                            .addComponent(rkTotalNonRec, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                            .addComponent(rkXrayNonRec))))
                .addContainerGap())
        );
        rkNonRecLayout.setVerticalGroup(
            rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, rkNonRecLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel43, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(rkYearNor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel44)
                    .addComponent(rkMonthNor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(5, 5, 5)
                .addGroup(rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(rkCodeNOR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rkNameNonRec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel23))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rkMedicinesNonRec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(rkPlabNonRec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(rkXrayNonRec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel48)
                    .addComponent(rkAmbulanceNonRec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(rkNonRecLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(rkTotalNonRec, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rkSaveRec)
                .addContainerGap())
        );

        RKClinical.addTab("Non Recoverable", rkNonRec);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(RKClinical)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(RKClinical, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rkTotalMTKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rkTotalMTKeyReleased
        try {
            int count = Integer.parseInt(rkMedicinesMT.getText()) + Integer.parseInt(rkPlabMT.getText()) + Integer.parseInt(rkXrayMT.getText()) + Integer.parseInt(rkAmbulanceMT.getText());
            rkTotalMT.setText(count + "");
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_rkTotalMTKeyReleased

    private void rkTotalContrKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rkTotalContrKeyReleased
        try {
            int count = Integer.parseInt(rkMedicinesContr.getText()) + Integer.parseInt(rkPlabContr.getText()) + Integer.parseInt(rkXrayContr.getText()) + Integer.parseInt(rkAmbulanceContr1.getText());
            rkTotalContr.setText(count + "");
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_rkTotalContrKeyReleased

    private void rkTotalSecuKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rkTotalSecuKeyReleased
        try {
            int count = Integer.parseInt(rkMedicinesSecu.getText()) + Integer.parseInt(rkPlabSecu.getText()) + Integer.parseInt(rkXraySecu.getText()) + Integer.parseInt(rkAmbulanceSecu.getText());
            rkTotalSecu.setText(count + "");
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_rkTotalSecuKeyReleased

	private void rkTotalNorKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rkTotalNorKeyReleased
            try {
                int count = Integer.parseInt(rkMedicinesNonRec.getText()) + Integer.parseInt(rkPlabNonRec.getText()) + Integer.parseInt(rkXrayNonRec.getText()) + Integer.parseInt(rkAmbulanceNonRec.getText());
                rkTotalNonRec.setText(count + "");
            } catch (NumberFormatException e) {
            }
    }//GEN-LAST:event_rkTotalNorKeyReleased

	private void rkSaveConStaffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rkSaveConStaffActionPerformed
            try {
                if (rkMedicinesContr.getText().isEmpty()) {
                    rkMedicinesContr.setText("00");
                }
                if (rkPlabContr.getText().isEmpty()) {
                    rkPlabContr.setText("00");
                }
                if (rkXrayContr.getText().isEmpty()) {
                    rkXrayContr.setText("00");
                }
                
                if (rkAmbulanceContr1.getText().isEmpty()) {
                    rkAmbulanceContr1.setText("00");
                }
                
                if (rkSaveConStaff.getText().equals("Save")) {
                    ps = con.prepareStatement("INSERT INTO `rkcons`(`rkCode`, `rkName`, `rkMedicine`, `rkPlab`, `rkXray`, `rkTotal`, `rkMonth`, `rkYear`,`rkAmbulance`) VALUES (?,?,?,?,?,?,?,?,?)");
                    ps.setString(1, (String) rkCodeCon1.getSelectedItem());
                    ps.setString(2, rkNameContr.getText());
                    ps.setString(3, rkMedicinesContr.getText());
                    ps.setString(4, rkPlabContr.getText());
                    ps.setString(5, rkXrayContr.getText());
                    ps.setString(6, rkTotalContr.getText());
                    ps.setString(7, (String) rkMonthCon.getSelectedItem());
                    ps.setString(8, (String) rkYearCon.getSelectedItem());
                    ps.setString(9, rkAmbulanceContr1.getText());
                    int count = ps.executeUpdate();
                    if (count > 0) {
                        JOptionPane.showMessageDialog(this, "Recode Saved Sucessfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else if (rkSaveConStaff.getText().equals("Update")) {
                    ps = con.prepareStatement("UPDATE `rkcons` SET `rkName`=?,`rkMedicine`=?,`rkPlab`=?,`rkXray`=?,`rkTotal`=?,`rkAmbulance`=? WHERE ID = ?");
                    ps.setString(1, rkNameContr.getText());
                    ps.setInt(2, medicine[1] + Integer.parseInt(rkMedicinesContr.getText()));
                    ps.setInt(3, Plab[1] + Integer.parseInt(rkPlabContr.getText()));
                    ps.setInt(4, Xray[1] + Integer.parseInt(rkXrayContr.getText()));
                    ps.setInt(5, total[1] + Integer.parseInt(rkTotalContr.getText()));
                    ps.setInt(6, Ambulance[1] + Integer.parseInt(rkAmbulanceContr1.getText()));
                    ps.setString(7, (String) conHashMap.get(rkCodeCon1.getSelectedItem()));
                    int count = ps.executeUpdate();
                    if (count > 0) {
                        JOptionPane.showMessageDialog(this, "Recode Update Sucessfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } catch (HeadlessException | NumberFormatException | SQLException e) {
                JOptionPane.showMessageDialog(this, val.printError(e.getClass(), e.getMessage()));
            }
    }//GEN-LAST:event_rkSaveConStaffActionPerformed

    private void rkSaveRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rkSaveRecActionPerformed
        try {
            if (rkMedicinesNonRec.getText().isEmpty()) {
                rkMedicinesNonRec.setText("00");
            }
            if (rkPlabNonRec.getText().isEmpty()) {
                rkPlabNonRec.setText("00");
            }
            if (rkXrayNonRec.getText().isEmpty()) {
                rkXrayNonRec.setText("00");
            }
            
            if (rkAmbulanceNonRec.getText().isEmpty()) {
                rkAmbulanceNonRec.setText("00");
            }
            
            if (rkSaveRec.getText().equals("Save")) {
                ps = con.prepareStatement("INSERT INTO `rkrecs`(`rkCode`, `rkName`, `rkMedicine`, `rkPlab`, `rkXray`, `rkTotal`, `rkMonth`, `rkYear`,`rkAmbulance`) VALUES (?,?,?,?,?,?,?,?,?)");
                ps.setString(1, (String) rkCodeNOR.getSelectedItem());
                ps.setString(2, rkNameNonRec.getText());
                ps.setString(3, rkMedicinesNonRec.getText());
                ps.setString(4, rkPlabNonRec.getText());
                ps.setString(5, rkXrayNonRec.getText());
                ps.setString(6, rkTotalNonRec.getText());
                ps.setString(9, rkAmbulanceNonRec.getText());
                ps.setString(7, (String) rkMonthNor.getSelectedItem());
                ps.setString(8, (String) rkYearNor.getSelectedItem());
                int count = ps.executeUpdate();
                if (count > 0) {
                    JOptionPane.showMessageDialog(this, "Recode Saved Sucessfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                }
            } else if (rkSaveRec.getText().equals("Update")) {
                ps = con.prepareStatement("UPDATE `rkrecs` SET `rkName`=?,`rkMedicine`=?,`rkPlab`=?,`rkXray`=?,`rkTotal`=?,`rkAmbulance`=? WHERE ID = ?");
                ps.setString(1, rkNameContr.getText());
                ps.setInt(2, medicine[4] + Integer.parseInt(rkMedicinesNonRec.getText()));
                ps.setInt(3, Plab[4] + Integer.parseInt(rkPlabNonRec.getText()));
                ps.setInt(4, Xray[4] + Integer.parseInt(rkXrayNonRec.getText()));
                ps.setInt(5, total[4] + Integer.parseInt(rkTotalNonRec.getText()));
                ps.setInt(6, Ambulance[4] + Integer.parseInt(rkAmbulanceNonRec.getText()));
                ps.setString(7, (String) recHashMap.get(rkCodeNOR.getSelectedItem()));
                int count = ps.executeUpdate();
                if (count > 0) {
                    JOptionPane.showMessageDialog(this, "Recode Update Sucessfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (HeadlessException | NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(this, val.printError(e.getClass(), e.getMessage()));
        }
    }//GEN-LAST:event_rkSaveRecActionPerformed
    
    private void rkSaveSecStaffActionPerformed(java.awt.event.ActionEvent evt) {
        try {
            if (rkMedicinesSecu.getText().isEmpty()) {
                rkMedicinesSecu.setText("00");
            }
            if (rkPlabSecu.getText().isEmpty()) {
                rkPlabSecu.setText("00");
            }
            if (rkXraySecu.getText().isEmpty()) {
                rkXraySecu.setText("00");
            }
            if (rkAmbulanceSecu.getText().isEmpty()) {
                rkAmbulanceSecu.setText("00");
            }
            
            if (rkSaveSecStaff.getText().equals("Save")) {
                ps = con.prepareStatement("INSERT INTO `rksecs`(`rkCode`, `rkName`, `rkMedicine`, `rkPlab`, `rkXray`, `rkTotal`, `rkMonth`, `rkYear`,`rkAmbulance`) VALUES (?,?,?,?,?,?,?,?,?)");
                ps.setString(1, (String) rkCodeSec.getSelectedItem());
                ps.setString(2, rkNameSecu.getText());
                ps.setString(3, rkMedicinesSecu.getText());
                ps.setString(4, rkPlabSecu.getText());
                ps.setString(5, rkXraySecu.getText());
                ps.setString(6, rkTotalSecu.getText());
                ps.setString(9, rkAmbulanceSecu.getText());
                ps.setString(7, (String) rkMonthSec.getSelectedItem());
                ps.setString(8, (String) rkYearSec.getSelectedItem());
                int count = ps.executeUpdate();
                if (count > 0) {
                    JOptionPane.showMessageDialog(this, "Recode Saved Sucessfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                }
            } else if (rkSaveSecStaff.getText().equals("Update")) {
                ps = con.prepareStatement("UPDATE `rksecs` SET `rkName`=?,`rkMedicine`=?,`rkPlab`=?,`rkXray`=?,`rkTotal`=?,`rkAmbulance`=? WHERE ID = ?");
                ps.setString(1, rkNameSecu.getText());
                ps.setInt(2, medicine[2] + Integer.parseInt(rkMedicinesSecu.getText()));
                ps.setInt(3, Plab[2] + Integer.parseInt(rkPlabSecu.getText()));
                ps.setInt(4, Xray[2] + Integer.parseInt(rkXraySecu.getText()));
                ps.setInt(5, total[2] + Integer.parseInt(rkTotalSecu.getText()));
                ps.setInt(6, Ambulance[2] + Integer.parseInt(rkAmbulanceSecu.getText()));
                ps.setString(7, (String) secHashMap.get(rkCodeSec.getSelectedItem()));
                int count = ps.executeUpdate();
                if (count > 0) {
                    JOptionPane.showMessageDialog(this, "Recode Update Sucessfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (HeadlessException | NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(this, val.printError(e.getClass(), e.getMessage()));
        }
    }

	private void rkSaveMTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rkSaveMTActionPerformed
            try {
                if (rkMedicinesMT.getText().isEmpty()) {
                    rkMedicinesMT.setText("00");
                }
                if (rkPlabMT.getText().isEmpty()) {
                    rkPlabMT.setText("00");
                }
                if (rkXrayMT.getText().isEmpty()) {
                    rkXrayMT.setText("00");
                }
                if (rkAmbulanceMT.getText().isEmpty()) {
                    rkAmbulanceMT.setText("00");
                }
                
                if (rkSaveMT.getText().equals("Save")) {
                    ps = con.prepareStatement("INSERT INTO `rkmts`(`rkCode`, `rkName`, `rkMedicine`, `rkPlab`, `rkXray`, `rkTotal`, `rkMonth`, `rkYear`,`rkAmbulance`) VALUES (?,?,?,?,?,?,?,?,?)");
                    ps.setString(1, (String) rkCodeMT.getSelectedItem());
                    ps.setString(2, rkNameMT.getText());
                    ps.setString(3, rkMedicinesMT.getText());
                    ps.setString(4, rkPlabMT.getText());
                    ps.setString(5, rkXrayMT.getText());
                    ps.setString(6, rkTotalMT.getText());
                    ps.setString(9, rkAmbulanceMT.getText());
                    ps.setString(7, (String) rkMonth.getSelectedItem());
                    ps.setString(8, (String) rkYear.getSelectedItem());
                    int count = ps.executeUpdate();
                    if (count > 0) {
                        JOptionPane.showMessageDialog(this, "Recode Update Sucessfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                    }
                } else if (rkSaveMT.getText().equals("Update")) {
                    ps = con.prepareStatement("UPDATE `rkmts` SET `rkName`=?,`rkMedicine`=?,`rkPlab`=?,`rkXray`=?,`rkTotal`=?,`rkAmbulance`=? WHERE ID = ?");
                    ps.setString(1, rkNameMT.getText());
                    ps.setInt(2, medicine[0] + Integer.parseInt(rkMedicinesMT.getText()));
                    ps.setInt(3, Plab[0] + Integer.parseInt(rkPlabMT.getText()));
                    ps.setInt(4, Xray[0] + Integer.parseInt(rkXrayMT.getText()));
                    ps.setInt(5, total[0] + Integer.parseInt(rkTotalMT.getText()));
                    ps.setInt(6, Ambulance[0] + Integer.parseInt(rkAmbulanceMT.getText()));
                    ps.setString(7, (String) mtHashMap.get(rkCodeMT.getSelectedItem()));
                    int count = ps.executeUpdate();
                    if (count > 0) {
                        JOptionPane.showMessageDialog(this, "Recode Update Sucessfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                    }
                }
            } catch (HeadlessException | NumberFormatException | SQLException e) {
                JOptionPane.showMessageDialog(this, val.printError(e.getClass(), e.getMessage()));
            }
    }//GEN-LAST:event_rkSaveMTActionPerformed

    private void rkSaveDSPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rkSaveDSPActionPerformed
        try {
            if (rkMedicinesDSP.getText().isEmpty()) {
                rkMedicinesDSP.setText("00");
            }
            if (rkPlabDSP.getText().isEmpty()) {
                rkPlabDSP.setText("00");
            }
            if (rkXrayDSP.getText().isEmpty()) {
                rkXrayDSP.setText("00");
            }
            if (rkAmbulanceDSP.getText().isEmpty()) {
                rkAmbulanceDSP.setText("00");
            }
            
            if (rkSaveDSP.getText().equals("Save")) {
                ps = con.prepareStatement("INSERT INTO `rkdsps`(`rkCode`, `rkName`, `rkMedicine`, `rkPlab`, `rkXray`, `rkTotal`, `rkMonth`, `rkYear`,`rkAmbulance`) VALUES (?,?,?,?,?,?,?,?,?)");
                ps.setString(1, (String) rkCodeDSP.getSelectedItem());
                ps.setString(2, rkNameDSP.getText());
                ps.setString(3, rkMedicinesDSP.getText());
                ps.setString(4, rkPlabDSP.getText());
                ps.setString(5, rkXrayDSP.getText());
                ps.setString(6, rkTotalDSP.getText());
                ps.setString(9, rkAmbulanceDSP.getText());
                ps.setString(7, (String) rkMonthDps.getSelectedItem());
                ps.setString(8, (String) rkYearDps.getSelectedItem());
                int count = ps.executeUpdate();
                if (count > 0) {
                    JOptionPane.showMessageDialog(this, "Recode Saved Sucessfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                }
            } else if (rkSaveDSP.getText().equals("Update")) {
                ps = con.prepareStatement("UPDATE `rkdsps` SET `rkName`=?,`rkMedicine`=?,`rkPlab`=?,`rkXray`=?,`rkTotal`=?,`rkAmbulance` = ? WHERE ID = ?");
                ps.setString(1, rkNameDSP.getText());
                ps.setInt(2, medicine[3] + Integer.parseInt(rkMedicinesDSP.getText()));
                ps.setInt(3, Plab[3] + Integer.parseInt(rkPlabDSP.getText()));
                ps.setInt(4, Xray[3] + Integer.parseInt(rkXrayDSP.getText()));
                ps.setInt(5, total[3] + Integer.parseInt(rkTotalDSP.getText()));
                ps.setInt(6, total[3] + Integer.parseInt(rkAmbulanceDSP.getText()));
                ps.setString(7, (String) dspHashMap.get(rkCodeDSP.getSelectedItem()));
                int count = ps.executeUpdate();
                if (count > 0) {
                    JOptionPane.showMessageDialog(this, "Recode Update Sucessfully", "Information", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        } catch (HeadlessException | NumberFormatException | SQLException e) {
            JOptionPane.showMessageDialog(this, val.printError(e.getClass(), e.getMessage()));
        }
    }//GEN-LAST:event_rkSaveDSPActionPerformed

	private void rkYearMonthDpsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rkYearMonthDpsItemStateChanged
            year[3] = Integer.parseInt((String) rkYearDps.getSelectedItem());
            month[3] = Integer.parseInt((String) rkMonthDps.getSelectedItem());
            rkDSPS();
    }//GEN-LAST:event_rkYearMonthDpsItemStateChanged

    private void rkYearMonthNorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rkYearMonthNorItemStateChanged
        year[4] = Integer.parseInt((String) rkYearNor.getSelectedItem());
        month[4] = Integer.parseInt((String) rkMonthNor.getSelectedItem());
        rkNOR();
    }//GEN-LAST:event_rkYearMonthNorItemStateChanged

    private void rkYearMonthSecKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rkYearMonthSecKeyReleased
        year[2] = Integer.parseInt((String) rkYearSec.getSelectedItem());
        month[2] = Integer.parseInt((String) rkMonthSec.getSelectedItem());
        rkSEC();
    }//GEN-LAST:event_rkYearMonthSecKeyReleased

    private void rkMonthYearItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rkMonthYearItemStateChanged
        year[0] = Integer.parseInt((String) rkYear.getSelectedItem());
        month[0] = Integer.parseInt((String) rkMonth.getSelectedItem());
        rkMTS();
    }//GEN-LAST:event_rkMonthYearItemStateChanged

    private void rkMonthYearConItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rkMonthYearConItemStateChanged
        year[1] = Integer.parseInt((String) rkYearCon.getSelectedItem());
        month[1] = Integer.parseInt((String) rkMonthCon.getSelectedItem());
        rkCON();
    }//GEN-LAST:event_rkMonthYearConItemStateChanged

    private void rkCodeDSPItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rkCodeDSPItemStateChanged
        rkDSPS();
    }//GEN-LAST:event_rkCodeDSPItemStateChanged

    private void rkCodeNORItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rkCodeNORItemStateChanged
        rkNOR();
    }//GEN-LAST:event_rkCodeNORItemStateChanged

	private void rkCodeSecItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rkCodeSecItemStateChanged
            rkSEC();
    }//GEN-LAST:event_rkCodeSecItemStateChanged

	private void rkCodeMTItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rkCodeMTItemStateChanged
            rkMTS();
    }//GEN-LAST:event_rkCodeMTItemStateChanged

    private void rkCodeCon1ItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_rkCodeCon1ItemStateChanged
        rkCON();
    }//GEN-LAST:event_rkCodeCon1ItemStateChanged

    private void rkTotalDSPKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rkTotalDSPKeyReleased
        try {
            int count = Integer.parseInt(rkMedicinesDSP.getText()) + Integer.parseInt(rkPlabDSP.getText()) + Integer.parseInt(rkXrayDSP.getText()) + Integer.parseInt(rkAmbulanceDSP.getText());
            rkTotalDSP.setText(count + "");
        } catch (NumberFormatException e) {
        }
    }//GEN-LAST:event_rkTotalDSPKeyReleased

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTabbedPane RKClinical;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel43;
    private javax.swing.JLabel jLabel44;
    private javax.swing.JLabel jLabel45;
    private javax.swing.JLabel jLabel46;
    private javax.swing.JLabel jLabel47;
    private javax.swing.JLabel jLabel48;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField rkAmbulanceContr1;
    private javax.swing.JTextField rkAmbulanceDSP;
    private javax.swing.JTextField rkAmbulanceMT;
    private javax.swing.JTextField rkAmbulanceNonRec;
    private javax.swing.JTextField rkAmbulanceSecu;
    private javax.swing.JComboBox<String> rkCodeCon1;
    private javax.swing.JComboBox<String> rkCodeDSP;
    private javax.swing.JComboBox<String> rkCodeMT;
    private javax.swing.JComboBox<String> rkCodeNOR;
    private javax.swing.JComboBox<String> rkCodeSec;
    private javax.swing.JPanel rkConStaff;
    private javax.swing.JPanel rkDPSStaff;
    private javax.swing.JPanel rkMTStaff;
    private javax.swing.JTextField rkMedicinesContr;
    private javax.swing.JTextField rkMedicinesDSP;
    private javax.swing.JTextField rkMedicinesMT;
    private javax.swing.JTextField rkMedicinesNonRec;
    private javax.swing.JTextField rkMedicinesSecu;
    private javax.swing.JComboBox<String> rkMonth;
    private javax.swing.JComboBox<String> rkMonthCon;
    private javax.swing.JComboBox<String> rkMonthDps;
    private javax.swing.JComboBox<String> rkMonthNor;
    private javax.swing.JComboBox<String> rkMonthSec;
    private javax.swing.JTextField rkNameContr;
    private javax.swing.JTextField rkNameDSP;
    private javax.swing.JTextField rkNameMT;
    private javax.swing.JTextField rkNameNonRec;
    private javax.swing.JTextField rkNameSecu;
    private javax.swing.JPanel rkNonRec;
    private javax.swing.JTextField rkPlabContr;
    private javax.swing.JTextField rkPlabDSP;
    private javax.swing.JTextField rkPlabMT;
    private javax.swing.JTextField rkPlabNonRec;
    private javax.swing.JTextField rkPlabSecu;
    private javax.swing.JButton rkSaveConStaff;
    private javax.swing.JButton rkSaveDSP;
    private javax.swing.JButton rkSaveMT;
    private javax.swing.JButton rkSaveRec;
    private javax.swing.JButton rkSaveSecStaff;
    private javax.swing.JPanel rkSecStaff;
    private javax.swing.JTextField rkTotalContr;
    private javax.swing.JTextField rkTotalDSP;
    private javax.swing.JTextField rkTotalMT;
    private javax.swing.JTextField rkTotalNonRec;
    private javax.swing.JTextField rkTotalSecu;
    private javax.swing.JTextField rkXrayContr;
    private javax.swing.JTextField rkXrayDSP;
    private javax.swing.JTextField rkXrayMT;
    private javax.swing.JTextField rkXrayNonRec;
    private javax.swing.JTextField rkXraySecu;
    private javax.swing.JComboBox<String> rkYear;
    private javax.swing.JComboBox<String> rkYearCon;
    private javax.swing.JComboBox<String> rkYearDps;
    private javax.swing.JComboBox<String> rkYearNor;
    private javax.swing.JComboBox<String> rkYearSec;
    // End of variables declaration//GEN-END:variables
    private final rkValidation val = new rkValidation();
    private final rkDatabase db = new rkDatabase();
    private HashMap<Object, Object> mtHashMap, conHashMap, secHashMap, dspHashMap, recHashMap;
    private int year[] = new int[5];
    private int month[] = new int[5];
    private int Plab[] = new int[5];
    private int Xray[] = new int[5];
    private int total[] = new int[5];
    private int medicine[] = new int[5];
    private int Ambulance[] = new int[5];
    Connection con = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    
    private void rkMTS() {
        try {
            ps = con.prepareStatement("SELECT * FROM `rkmts` WHERE `rkCode` = ? AND`rkMonth` = ? AND`rkYear` = ?");
            ps.setString(1, (String) rkCodeMT.getSelectedItem());
            ps.setInt(2, month[0]);
            ps.setInt(3, year[0]);
            rs = ps.executeQuery();
            
            if (rs.next()) {
                medicine[0] = rs.getInt(4);
                Plab[0] = rs.getInt(5);
                Xray[0] = rs.getInt(6);
                total[0] = rs.getInt(7);
                Ambulance[0] = rs.getInt(10);
                rkNameMT.setText(rs.getNString(3));
                rkNameMT.setEnabled(false);
                rkSaveMT.setText("Update");
            } else {
                ps = con.prepareStatement("select * from rkmts where rkcode=?");
                ps.setString(1, (String)rkCodeMT.getSelectedItem());
                rs=ps.executeQuery();
                if(rs.next()){
                    rkNameMT.setText(rs.getNString(3));
                    rs.close();
                    ps.close();
                }
                medicine[0] = Plab[0] = Xray[0] = total[0] = Ambulance[0] = 0;
                rkNameMT.setEnabled(true);
                rkSaveMT.setText("Save");
                rkMedicinesMT.setText("00");
                rkPlabMT.setText("00");
                rkXrayMT.setText("00");
                rkAmbulanceMT.setText("00");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, val.printError(e.getClass(), e.getMessage()));
        }
    }
    
    private void rkCON() {
        try {
            ps = con.prepareStatement("SELECT * FROM `rkcons` WHERE `rkCode` = ? AND`rkMonth` = ? AND`rkYear` = ?");
            ps.setString(1, (String) rkCodeCon1.getSelectedItem());
            ps.setInt(2, month[0]);
            ps.setInt(3, year[0]);
            rs = ps.executeQuery();
            
            if (rs.next()) {
                medicine[1] = rs.getInt(4);
                Plab[1] = rs.getInt(5);
                Xray[1] = rs.getInt(6);
                total[1] = rs.getInt(7);
                Ambulance[1] = rs.getInt(10);
                rkNameContr.setText(rs.getNString(3));
                rkNameContr.setEnabled(false);
                rkSaveConStaff.setText("Update");
            } else {
                ps = con.prepareStatement("select * from rkcons where rkcode=?");
                ps.setString(1, (String)rkCodeCon1.getSelectedItem());
                rs=ps.executeQuery();
                if(rs.next()){
                    rkNameMT.setText(rs.getNString(3));
                    rs.close();
                    ps.close();
                }
                medicine[1] = Plab[1] = Xray[1] = total[1] = Ambulance[1] = 0;
                rkNameContr.setEnabled(true);
                rkSaveConStaff.setText("Save");
                rkMedicinesContr.setText("00");
                rkPlabContr.setText("00");
                rkXrayContr.setText("00");
                rkTotalContr.setText("00");
                rkAmbulanceContr1.setText("00");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, val.printError(e.getClass(), e.getMessage()));
        }
    }
    
    private void rkSEC() {
        try {
            ps = con.prepareStatement("SELECT * FROM `rksecs` WHERE `rkCode` = ? AND`rkMonth` = ? AND`rkYear` = ?");
            ps.setString(1, (String) rkCodeSec.getSelectedItem());
            ps.setInt(2, month[2]);
            ps.setInt(3, year[2]);
            rs = ps.executeQuery();
            
            if (rs.next()) {
                medicine[2] = rs.getInt(4);
                Plab[2] = rs.getInt(5);
                Xray[2] = rs.getInt(6);
                total[2] = rs.getInt(7);
                Ambulance[2] = rs.getInt(10);
                rkNameContr.setText(rs.getNString(3));
                rkNameContr.setEnabled(false);
                rkSaveSecStaff.setText("Update");
            } else {
                ps = con.prepareStatement("select * from rksecs where rkcode=?");
                ps.setString(1, (String)rkCodeSec.getSelectedItem());
                rs=ps.executeQuery();
                if(rs.next()){
                    rkNameMT.setText(rs.getNString(3));
                    rs.close();
                    ps.close();
                }
                medicine[2] = Plab[2] = Xray[2] = total[2] = Ambulance[2] = 0;
                rkNameSecu.setEnabled(true);
                rkSaveSecStaff.setText("Save");
                rkMedicinesSecu.setText("00");
                rkPlabSecu.setText("00");
                rkXraySecu.setText("00");
                rkTotalSecu.setText("00");
                rkAmbulanceSecu.setText("00");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, val.printError(e.getClass(), e.getMessage()));
        }
    }
    
    private void rkDSPS() {
        try {
            ps = con.prepareStatement("SELECT * FROM `rkdsps` WHERE `rkCode` = ? AND`rkMonth` = ? AND`rkYear` = ?");
            ps.setString(1, (String) rkCodeDSP.getSelectedItem());
            ps.setInt(2, month[3]);
            ps.setInt(3, year[4]);
            rs = ps.executeQuery();
            
            if (rs.next()) {
                medicine[3] = rs.getInt(4);
                Plab[3] = rs.getInt(5);
                Xray[3] = rs.getInt(6);
                total[3] = rs.getInt(7);
                Ambulance[3] = rs.getInt(10);
                rkNameDSP.setText(rs.getNString(3));
                rkNameDSP.setEnabled(false);
                rkSaveDSP.setText("Update");
            } else {
                ps = con.prepareStatement("select * from rkdsps where rkcode=?");
                ps.setString(1, (String)rkCodeDSP.getSelectedItem());
                rs=ps.executeQuery();
                if(rs.next()){
                    rkNameMT.setText(rs.getNString(3));
                    rs.close();
                    ps.close();
                }
                medicine[3] = Plab[3] = Xray[3] = total[3] = 0;
                rkNameDSP.setEnabled(true);
                rkSaveDSP.setText("Save");
                rkMedicinesDSP.setText("00");
                rkPlabDSP.setText("00");
                rkXrayDSP.setText("00");
                rkTotalDSP.setText("00");
                rkAmbulanceDSP.setText("00");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, val.printError(e.getClass(), e.getMessage()));
        }
    }
    
    private void rkNOR() {
        try {
            ps = con.prepareStatement("SELECT * FROM `rkrecs` WHERE `rkCode` = ? AND`rkMonth` = ? AND`rkYear` = ?");
            ps.setString(1, (String) rkCodeNOR.getSelectedItem());
            ps.setInt(2, month[3]);
            ps.setInt(3, year[4]);
            rs = ps.executeQuery();
            
            if (rs.next()) {
                medicine[4] = rs.getInt(4);
                Plab[4] = rs.getInt(5);
                Xray[4] = rs.getInt(6);
                total[4] = rs.getInt(7);
                Ambulance[4] = rs.getInt(10);
                rkNameNonRec.setText(rs.getNString(3));
                rkNameNonRec.setEnabled(false);
                rkSaveRec.setText("Update");
            } else {
                ps = con.prepareStatement("select * from rkrecs where rkcode=?");
                ps.setString(1, (String)rkCodeNOR.getSelectedItem());
                rs=ps.executeQuery();
                if(rs.next()){
                    rkNameMT.setText(rs.getNString(3));
                    rs.close();
                    ps.close();
                }
                medicine[4] = Plab[4] = Xray[4] = total[4] = 0;
                rkNameNonRec.setEnabled(true);
                rkSaveRec.setText("Save");
                rkMedicinesNonRec.setText("00");
                rkPlabNonRec.setText("00");
                rkXrayNonRec.setText("00");
                rkTotalNonRec.setText("00");
                rkAmbulanceNonRec.setText("00");
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, val.printError(e.getClass(), e.getMessage()));
        }
    }
}
